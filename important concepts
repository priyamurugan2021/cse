Gmail	Prasath MSD7 <prasathmuruganmsd7@gmail.com>
MKCE PRACTICE 14P + Additional programs
S Divya <divya.psaravanan@gmail.com>	Tue, Mar 31, 2020 at 11:11 AM
To: Keerthana G <keerthana.guna26@gmail.com>, abithiyagarajan2804@gmail.com, suganyakrithimkce@gmail.com, divyabharathi7638@gmail.com, VK18 <mails4guhan@gmail.com>, shimmarrahim.8032000@gmail.com, Sacratees 007 <sacratees007be@gmail.com>, Sanju S <ssanjay.7896@gmail.com>, jegadeeswarankrr@gmail.com, arjunvj77@gmail.com, Muhil Leo <muhilrajanv@gmail.com>, prasathcse <prasathmuruganmsd7@gmail.com>
1.Convert Base
Given a number of with base A to base B, where A is the smallest number which has two fsactors, and B is a number which a number which is formed by multiplyig the unique terms in the prime factorised form C, where C is the tenth number which has odd number of factor.

Input Format

One integer input N

Constraints

1<=N<=10^18

Output Format

Base converted output

Sample Input 0

11101000010001010
Sample Output 0

118922
a=input()
b=int(a,2)
print(b)
2.Convert Base V_2.0



Given a number of with base A to base B, where A is the smallest number which has two factors, and B is a number which is second highest factor of a number which when added with the second ever number which has odd number of factors, they add up to form a number which is the sisth ever number to have odd number of factors.

Input Format

One integer input N

Constraints

1<=N<=10^18

Output Format

The converted base element output

Sample Input 0

11000100000111110
Sample Output 0

1883e

a=input()
a=int(a,2)
l=[]
while a:
    if a%16 >9:
        if a%16==10:
            l.append('a')
        if a%16==11:
            l.append('b')
        if a%16==12:
            l.append('c')
        if a%16==13:
            l.append('d')
        if a%16==14:
            l.append('e')
        if a%16==15:
            l.append('f')
    else:
        l.append(str(a%16))
    a=a//16
l=l[::-1]
print("".join(l))
3.Trailing Zeros Count




Given a number N, find out the number of trailing zeros in the factorial of the given number N

Input Format

One integer input

Constraints

!<=N<=10^18

Output Format

One integer output denoting the number of zeros in the factorial of the given number N


i/p:15 o/p:3


def find_trailing_zeros(num) :
    sum = 0
    i = 1
    while(True) :
        quotient = num // (5 ** i)
        if(quotient == 0) :
                break
        sum += quotient
        i += 1
    return(sum)
num=int(input())
print(find_trailing_zeros(num))
4.Facsum




Given a number N, find the factorial of the gien number and repeatedly add the digits of the factorial till you are left with one digit.

Input Format

One integer input

Constraints

1<=N<=20

Output Format

One digit integer output

Sample Input 0

0
Sample Output 0

1

from math import factorial as f
a=int(input())
b=f(a)
c=b%9
print(c)

5.Fire the Zeros

Given a number N, remove all the zeros from the binary representation of the number and convert the remaining number to integer.

Input Format

One integer value N

Constraints

1<=N<=10^18

Output Format

One integer output

Sample Input 0

7911852283209194
Sample Output 0

268435455

import math
a=int(input())
b=bin(a).split('b')
c=str(b[1]).split('0')
e=list(''.join(c))
d=0
for i in range(len(e)):
    d=d+math.pow(2,i)
print(int(d))

-----------------------------------------------------------------
6.Watson gives four 3-dimensional points to Sherlock and asks him if they all lie in the same plane. Your task here is to help Sherlock.

Input Format
First line contains T, the number of testcases.
Each test case consists of four lines. Each line contains three integers, denoting xi yi zi.

Output Format
For each test case, print YES or NO whether all four points lie in same plane or not, respectively.

Constraints
1 ≤ T ≤ 104
-103 ≤ xi,yi,zi ≤ 103

Sample Input

1
1 2 0
2 3 0
4 0 0
0 0 0
Sample Output

YES
Explanation
All points have zi = 0, hence they lie in the same plane, and output is YES





t = int(input())
for j in range(t):
    x = []
    y = []
    z = []
    for i in range(4):
        a,b,c = map(int, input().split())
        x.append(a)
        y.append(b)
        z.append(c)
    x.sort()
    y.sort()
    z.sort()
    print (["NO", "YES"][x[3]-x[0]==0 or y[3]-y[0]==0 or z[3]-z[0]==0])


-----------------------------------------------------------------
7.ARRAY ADJACENT

Given a number N followed by n integers, swap the adjacent elements of the array and print the resultant array as the output.

Input Format

First line of input has one single integer N Second line of input has N spaced integers

Constraints

1<=N<=10^9 -10^9<=a[i]<=10^9

Output Format

The resultant array after performing the adjacent swaps.

Sample Input 0

4
1 2 3 4
Sample Output 0

2 1 4 3
Explanation 0

Adjacent elements of the array are swapped.

PROGRAM:

n=int(input())
a=list(map(int,input().split()))
if (n%2==0):
    for i in range(0,n,2):
        a[i],a[i+1]=a[i+1],a[i]
    print(*a)
else:
    for i in range(0,n-1,2):
        a[i],a[i+1]=a[i+1],a[i]
    print(*a)



-----------------------------------------
8.STRING EXPANSION
Given a string input, which comprises of numbers and characters, expand the given string as instructed below.

For Example: The string "3b2aa" should be seen as 3[b[2[aa]]] and it should be expanded as baaaabaaaabaaaa

Input Format

One string input N

Constraints

2<=len(n)<=10^3 where n is the given string

Output Format

The expanded string

Sample Input 0

4pyo
Sample Output 0

pyopyopyopyo
PROGRAM:
import re
n=input()
num=re.compile('[\d]+').findall(n)
alpha=re.compile('[\D]+').findall(n)
s=""
for i in range(len(alpha)):
    s=(alpha.pop()+s)*int(num.pop())
print(s)


-------------------------------------------------------
9.ITERATOR 1

Gvien a number N followed by N integers, it will comprise of certain positive numbers, then a zero tehn follows negative numbers. Find the minimum number of iterations to convert a Positive-Zero-Negative array into a Negative-Zero-Positive array, by abiding by the given constraints.

Constraints for Swapping: 1. Swapping is possible only with a Zero 2. A positive number should be swapped only to the right hand side 3. A negative number should be swappend only to the left hand side 4. Swapping can be done to a maximum of two steps at a time.

Find the minimum number of iterations.

Input Format

The first line of input has a single integer value N followed by N integer values.

Constraints

3<=N<=2500 -1000<=a[i]<=1000 Where, N is the number of elements of the array and a[i] is each element of the array.

Output Format

One single integer denoting the number of iterations required.

Sample Input 0

3
1 0 -2
Sample Output 0

3
Explanation 0

Input: 1 0 -2 Step1: 0 1 -2 Step2:-2 1 0 Step3:-2 0 1 Output: 3 Minimum of three iterations are required to change the given array into the required format.

PROGRAM:

a=int(input())
b=list(map(int,input().split()))
p=0
n=0
for i in range(len(b)):
    if(i<0):
        p=p+1
    else:
        n=n+1
print(p+n+p*n)



========================================================

10.REVERSE ME IF U CAN
Given a number, print the reverse of the given number.

Input Format

A integer input

Constraints

Suspense

Output Format

The reverse of the given number N.

Sample Input 0

1234
Sample Output 0

4321
PROGRAM:
a=input()
if(a[0]=="-"):
    a='-'+str(int(a[1:][::-1]))
else:
    a=int(a[::-1])
print(a)


====================================================
11.PRIME FACTORS V1
Given a number N, print the prime factors of the given number

Input Format

One integer value N

Constraints

1<=N<=10^18

Output Format

Prime factors of the number, each seperated by a space

Sample Input 0

276398300
Sample Output 0

2 2 5 5 83 33301
PROGRAM:
from math import sqrt as s
n=int(input())
while(n%2==0):
    print("2",end=" ")
    n=n/2
for i in range(3,int(s(n)+1),2):
    while(n%i==0):
        print(i,end=" ")
        n/=i
if(n>2):
    print(int(n),end=" ")


================================================
12.CONVERT BASE 2.0
Given a number of with base A to base B, where A is the smallest number which has two factors, and B is a number which is second highest factor of a number which when added with the second ever number which has odd number of factors, they add up to form a number which is the sisth ever number to have odd number of factors.

Input Format

One integer input N

Constraints

1<=N<=10^18

Output Format

The converted base element output

Sample Input 0

11000100000111110
Sample Output 0

1883e
PROGRAM:
a=input()
a=int(a,2)
l=[]
while a:
    if a%16 >9:
        if a%16==10:
            l.append('a')
        if a%16==11:
            l.append('b')
        if a%16==12:
            l.append('c')
        if a%16==13:
            l.append('d')
        if a%16==14:
            l.append('e')
        if a%16==15:
            l.append('f')
    else:
        l.append(str(a%16))
    a=a//16
l=l[::-1]
print("".join(l))

=============================================================
13. DIGIT COUNT 2
Given a Number N, find the number of digits in the given number

Input Format

A integer input

Constraints

1<=N<=10^50

Output Format

One integer output

Sample Input 0

19606524803580981401080963834091988718121158294792
Sample Output 0

50
PROGRAM:
a=input()
c=0
for i in a:
    c+=1
print(c)
    


======================================================
14
Given a number N followed by N integer values, find the second larget number.

Input Format

First line of input has one integer input N The sedond line of input has N spaced integers

Constraints

1<=N=10**9 1<=a[i]<=10**9

Output Format

Print the second largest number

Sample Input 0

223

Sample Output 0

994133655
PROGRAM:
a=int(input())
b=list(map(int,input().split()))
b.sort(reverse=True)
print(b[1])


===========================================================
15
Given a number N, print PRIME prime numbers in the range 1 to N

Input Format

One integer value N

Constraints

1<=N<=10**9

Output Format

List of prime numbers in the range 1 to N eperted by a space. If there are no prime numbers in the given range print -1

Sample Input 0

8755
Sample Output 0


PROGRAM:
n=int(input())
for i in range(2,n):
    flag=True
    for x in range(2,i):
        if i%x==0:
            break
    else :
        print(i,end=' ')


========================================================
16.inorder tree in stair case
class Node:
    def __init__ (self,n):
        self.data=n
        self.left=None
        self.right=None
        self.root=None
    def create(self):
        if(self.data>1):
            self.left=Node(self.data-1)
            self.left.root=self
            self.left.create()
            self.right=Node(self.data-2)
            self.right.root=self
            self.right.create()
        elif(self.data==1):
            self.left=Node(self.data-1)
            self.left.root=self
            self.left.create()
        else:
            s=''
            self.print_path(s)
    def print_path(self,s):
        s+=str(self.data)
        if(self.root!=None):
            self.root.print_path(s)
        else:
            print(s)
    def order(self,s):
        s.append(self.data)
        if(self.data==0):
            t=s[::-1]
            print(*t)
        if(self.left!=None):
            self.left.order(s)
        if(self.right!=None):
            self.right.order(s)
        s.pop()    
n=int(input())
r=Node(n)
r.create()
r.order([])

====================================
17.tree with stair case using skip  

prasathcse
Thu, Feb 27, 1:40 PM

to Kabil, allwinrajjones, POOJA, priyasumathi1117, poojabhuvana2699, swathiomm, shivanipalanikumar410, Jamunasri, KEVIN, me

class Node:
    def __init__(self,n,k):
        self.data=n
        self.skip=k
        self.nxt=[]
        self.root=None
    def create(self):
        if(self.data==0):
            s=''
            self.path(s)
        for i in range(1,self.skip+1):
            if(self.data>=0):
                self.nxt.append(Node(self.data-i,self.skip))
                self.nxt[-1].root=self
                self.nxt[-1].create()
    def path(self,s):
        s+=str(self.data)
        if(self.root!=None):
            self.root.path(s)
        else:
            print(s)
n,k=map(int,input().split())
r=Node(n,k)
r.create()
=======================================================

21
from math import sqrt as sq
l1=list(map(int,input().split()))
x,y=0
for i in l1:
    if i=='N':
        x+=int(temp)
        temp=0
    elif i=='E':
        y+=temp
        temp=0
    elif i=='S':
        x+=temp
        temp=0
    elif i=='S':
        x+=temp
        temp=0
    elif i!= " ":#0-> 48(ASCII value)
        temp=temp*10+int(ord(i)-48)
result=sq(math.pow(x,2)+math.pow(y,2))
print(result)


=================================================================
22



19.Binary Tree



class Node:
    def __init__ (self,n):
        self.data=n
        self.left=None
        self.right=None
        self.root=None
    def create(self):
        if(self.data>1):
            self.left=Node(self.data-1)
            self.left.root=self
            self.left.create()
            self.right=Node(self.data-2)
            self.right.root=self
            self.right.create()
        elif(self.data==1):
            self.left=Node(self.data-1)
            self.left.root=self
            self.left.create()
        else:
            s=''
            self.print_path(s)
    def print_path(self,s):
        s+=str(self.data)
        if(self.root!=None):
            self.root.print_path(s)
        else:
            print(s)
n=int(input())
r=Node(n)
r.create()
====================================================
19
You are given an infinite 2-d grid with the bottom left cell referenced as (1,1). All the cells contain a value of zero initially. Let's play a game?

The game consists of N steps wherein each step you are given two integers a and b. The value of each of the cells in the co-ordinate (u, v) satisfying 1 ≤ u ≤ a and 1 ≤ v ≤ b, is increased by 1. After N such steps, if X is the largest number amongst all the cells in the rectangular board, can you print the number of X's in the board?

Input Format
The first line of input contains a single integer N. N lines follow.
Each line contains two integers a and b separated by a single space.

Output Format
Output a single integer - the number of X's.

Constraints
1 ≤ N ≤ 100
1 ≤ a ≤ 106
1 ≤ b ≤ 106

Sample Input

3
2 3
3 7
4 1
Sample Output

2
Explanation

Assume that the following board corresponds to cells (i, j) where 1 ≤ i ≤ 4 and 1 ≤ j ≤ 7.

At the beginning board is in the following state:

0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 0 0 0 
After the first step we will obtain:

0 0 0 0 0 0 0
0 0 0 0 0 0 0
1 1 1 0 0 0 0
1 1 1 0 0 0 0 
After the second step we will obtain:

0 0 0 0 0 0 0
1 1 1 1 1 1 1
2 2 2 1 1 1 1
2 2 2 1 1 1 1 
Finally, after the last step we will obtain:

1 0 0 0 0 0 0
2 1 1 1 1 1 1
3 2 2 1 1 1 1
3 2 2 1 1 1 1 
So, the maximum number is 3 and there are exactly two cells which correspond to 3. Hence 2.



n = int(input())
x = []
y = []
for i in range(n):
    a,b = list(map(int, input().split()))
    x.append(a)
    y.append(b)
print(min(x)*min(y))




#1st line .jus integer i/p .x , y nu 2 cols will be created ..we've 2 find min of 2 cols and mul. it......that's it dude!


===========================================================
20
import math
a=input().split()
x,y=0,0
for i in a:
    if(i[-1]=="N"):
        y+=int(i[:-1])
    elif(i[-1]=="S"):
        y-=int(i[:-1])
    elif(i[-1]=="E"):
        x+=int(i[:-1])
    else:
        x-=int(i[:-1])
print("Your Coordinates:",x,y)
if(x==0 and y>0):
    way="S"
elif(x==0 and y<0):
    way="N"
elif(x>0 and y==0):
    way="W"
elif(x<0 and y==0):
    way="E"
elif(x>0 and y>0):
    way="SW"
elif(x<0 and y<0):
    way="NE"
elif(x<0 and y>0):
    way="SE"
elif(x==0 and y==0):
    way="You are at center"
else:
    way="NW"
dis=math.sqrt((x**2)+(y**2))
print("Required: ","%.1f %s"%(dis,way))



=====================================================


21.base problem for all bases

l=[str(i) for i in range(10)]
l.extend([chr(i) for i in range(65,65+26)]
l.extend([chr(i) for i in range(97,97+26)]
def Int(s,base):
    p,r=1,0
    while(len(s)!=0):
        t=s[-1]
        r+=p*1.index(t)
        s=s[:-1]
        p=p*base
    return r
def func(v,base):
    r=""
    while(v!=0):
        r=l[v%base]+r
        v=v//base
    return r
s,b=input().split()
t=Int(s,int(b))
print(t)
print(func(t,int(b)))


